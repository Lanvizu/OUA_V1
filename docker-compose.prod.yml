version: '3.9'

services:

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: oua_v1
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysql", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1;"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5

  backend:
    image: ${DOCKER_USERNAME}/backend:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev, secret
      MYSQL_URL: jdbc:mysql://mysql:3306/oua_v1
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/oua_v1
      username: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_USERNAME: root
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      REDIS_HOST: redis
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_BUCKET: ${{ secrets.GCP_BUCKET }}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    image: ${DOCKER_USERNAME}/frontend:latest
    ports:
      - "3000:3000"
    networks:
      - app-network

  nginx:
    image: nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  frontend_build:
